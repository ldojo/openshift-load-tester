stage('build'){
  openshift.withCluster() { // Use "default" cluster or fallback to OpenShift cluster detection
      echo "Hello from the project running Jenkins: ${openshift.project()}"
      def gatlingLoadTesterBuildConfig = openshift.selector('bc/gatling-load-tester')
      gatlingLoadTesterBuildConfig.startBuild()
      gatlingLoadTesterBuildConfig.logs('-f')
      gatlingLoadTesterBuildConfig.related('builds').untilEach(1) {
        return it.object().status.phase == "Complete"
      }
  }
}

stage('load'){
  openshift.withCluster() { // Use "default" cluster or fallback to OpenShift cluster detection
    echo "Hello in stage load from the project running Jenkins: ${openshift.project()}"
    def gatlingLoadTesterImageStream = openshift.selector('is/gatling-load-tester')
    echo "image stream is: ${gatlingLoadTesterImageStream.object().status.dockerImageRepository}"
    try{
      openshift.selector('template/openshift-load-tester-job').delete()
      echo "previous template openshift-load-tester-job deleted"
    }catch (e){
      echo "creating template openshift-load-tester-job"
    }

    openshift.create(readFile("${env.WORKSPACE}@script/openshift-load-tester-job.yaml"))

    try{
      openshift.selector('job/gatling-load-test-job').delete()
      echo "previous job gatling-load-test-job deleted"
    }catch (e){
      echo "creating job gatling-load-test-job"
    }

    openshift.create(openshift.process("openshift-load-tester-job", "-p", "IMAGE=${gatlingLoadTesterImageStream.object().status.dockerImageRepository}"))
    echo "Waiting for load test pods to complete.."
    openshift.selector('job/openshift-load-tester-job').untilEach(1){
      return it.object().status.completionTime != null
    }
    openshift.selector("job/openshift-load-tester-job").delete()
  }
}
