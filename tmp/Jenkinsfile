def jobs = ["JobA", "JobB", "JobC"]

def parallelStagesMap = jobs.collectEntries {
    ["${it}" : generateStage(it)]
}

def generateStage(job) {
    return {
        stage("stage: ${job}") {
                echo "This is ${job}."
                sh script: "sleep 15"
        }
    }
}

pipeline {
  agent {
    node {
      label 'maven'
    }
  }
  options {
    timeout(time: 20, unit: 'MINUTES')
  }
  stages {
    stage('preamble') {
        steps {
            script {
                openshift.withCluster() {
                    openshift.withProject() {
                        echo "Using project: ${openshift.project()}"
                    }
                }
            }
            sh 'mkdir -p testresults; echo "test results" > testresults/test.txt'
        }
    }

    stage('non-parallel stage') {
      steps {
        echo 'This stage will be executed first.'
      }
    }

    stage('parallel stage') {
      steps {
        script {
            parallel parallelStagesMap
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'testresults/test.txt', fingerprint: true
    }
  }
}
